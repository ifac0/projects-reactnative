{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/ifac/Work - Poc/ReactNative/password-generator/App.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Slider from '@react-native-community/slider';\nvar charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&*!';\nexport default function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(10),\n      _useState4 = _slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  function generatePass() {\n    var pass = '';\n\n    for (var i = 0, n = charset.length; i < size; i++) {\n      pass += charset.charAt(Math.floor(Math.random() * n));\n    }\n\n    setPassword(pass);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: require(\"./src/assets/logo.png\"),\n    style: styles.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \" \", size, \" Caracteres \"), React.createElement(View, {\n    style: styles.area,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(Slider, {\n    style: styles.slider,\n    minimumValue: 5,\n    maximumValue: 15,\n    minimumTrackTintColor: \"#FF0000\",\n    maximumTrackTintColor: \"#000\",\n    value: size,\n    onValueChange: function onValueChange(value) {\n      return setSize(value.toFixed(0));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: generatePass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Gerar Senha\")), password !== '' && React.createElement(View, {\n    style: styles.area,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, password)));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f3f3ff'\n  },\n  logo: {\n    marginBottom: 60\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: 'bold'\n  },\n  area: {\n    marginTop: 15,\n    marginBottom: 15,\n    backgroundColor: '#FFF',\n    width: '90%',\n    borderRadius: 7\n  },\n  slider: {\n    height: 50\n  },\n  button: {\n    backgroundColor: '#FFA200',\n    width: '90%',\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 7,\n    marginBottom: 25\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#FFF',\n    fontWeight: 'bold'\n  },\n  password: {\n    padding: 10,\n    textAlign: 'center',\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["/home/ifac/Work - Poc/ReactNative/password-generator/App.js"],"names":["React","useState","Slider","charset","App","password","setPassword","size","setSize","generatePass","pass","i","n","length","charAt","Math","floor","random","styles","container","require","logo","title","area","slider","value","toFixed","button","buttonText","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","marginBottom","fontSize","fontWeight","marginTop","width","borderRadius","height","color","padding","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';\n\nimport Slider from '@react-native-community/slider';\n\nlet charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&*!'\n\nexport default function App() {\n  const [password, setPassword] = useState('');\n  const [size, setSize] = useState(10);\n\n  function generatePass() {\n    let pass = '';\n    for(let i=0, n = charset.length; i < size; i++) {\n      pass += charset.charAt(Math.floor(Math.random() * n))\n    }\n    setPassword(pass);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Image \n        source={require('./src/assets/logo.png')}\n        style={ styles.logo }\n      />\n      <Text style={styles.title}> {size} Caracteres </Text>\n      <View style={styles.area}>\n        <Slider\n          style={styles.slider}\n          minimumValue={5}\n          maximumValue={15}\n          minimumTrackTintColor=\"#FF0000\"\n          maximumTrackTintColor=\"#000\"\n          value={size}\n          onValueChange={(value)=> setSize(value.toFixed(0))}\n        />\n      </View>\n\n      <TouchableOpacity style={styles.button} onPress={generatePass}>\n        <Text style={styles.buttonText}>Gerar Senha</Text>\n      </TouchableOpacity>\n\n      {password !== '' && (\n        <View style={styles.area}>\n          <Text style={styles.password}>\n            { password }\n          </Text>\n        </View>\n      )}\n      \n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f3f3ff'\n  },\n  logo: {\n    marginBottom: 60\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  area: {\n    marginTop: 15,\n    marginBottom: 15,\n    backgroundColor: '#FFF',\n    width: '90%',\n    borderRadius: 7\n  },\n  slider: {\n    height: 50\n  },\n  button: {\n    backgroundColor: '#FFA200',\n    width: '90%',\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 7,\n    marginBottom: 25,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#FFF',\n    fontWeight: 'bold',\n  },\n  password: {\n    padding: 10,\n    textAlign: 'center',\n    fontSize:20,\n  }\n\n})"]},"metadata":{},"sourceType":"module"}